
import java.io.*;
import java.util.*;
public class LinkedList {
    Node head;
    static class Node {

        int data;
        Node next;

        Node(int d) //constructor
        {
            data = d;
            next = null;
        }
    }

    // Method to insert a new node
    public static LinkedList insert(LinkedList list, int data)
    {
        // Create a new node with given data
        Node new_node = new Node(data);


        // If the Linked List is empty then make the new node as head
        if (list.head == null) {
            list.head = new_node;
        }
        else {
            // Else traverse till the last node and insert the new_node there
            Node last = list.head;
            while (last.next != null) {
                last = last.next;
            }

            // Insert the new_node at last node
            last.next = new_node;
        }

        // Return the list by head
        return list;
    }

    // Method to print the LinkedList.
    public static void printList(LinkedList list)
    {
        Node currNode = list.head;

        System.out.print("LinkedList is : ");

        // Traverse through the LinkedList
        while (currNode != null) {
            // Print the data at current node
            System.out.print(currNode.data + " ");

            // Go to next node
            currNode = currNode.next;
        }
    }

    //code solution:
    static Node findNthFromLast(LinkedList list, int L, int N){
//        System.out.println(list.head.data);
        Node p= list.head;
        int i=1;
        int position= L-N+1;
        while(p!=null && position!=i){
            p=p.next;
            i+=1;

        }
        System.out.println("nth node's data from last: "+p.data);
        return p;
    }

    // Driver code
    public static void main(String[] args)
    {
        Scanner sc= new Scanner(System.in);
        System.out.println("Enter number of nodes of LinkedList: ");
        int L= sc.nextInt();
        System.out.println("Enter position of node from last: ");
        int N= sc.nextInt();

        LinkedList list = new LinkedList();
       // Insert the values
        System.out.println("enter data of  nodes ");
        int n=1;
        while(n<=L) {
            System.out.println("Enter data of node"+ n+ ": ");
            int val= sc.nextInt();
            list = insert(list, val);
            n+=1;
        }
        if(n==0){
            System.out.println("");
        }

        printList(list);
        System.out.println();

        //code solution of Ques 6:
        Node result= findNthFromLast(list,L, N);
        System.out.println(result);
    }
}


